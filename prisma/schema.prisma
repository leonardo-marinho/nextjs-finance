generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BankAccountType {
  Checking
  Savings
}

enum TransactionTransferVariant {
  Regular
  Transfer
}

enum TransactionTransferType {
  In
  Out
}

model BankAccount {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  name      String
  balance   Int?            @default(0)
  type      BankAccountType
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  deletedAt Boolean         @default(false)
  CreditCards CreditCard[]
  TransactionExpenses TransactionExpense[]
  TransactionRevenues TransactionRevenue[]
}

model CreditCard {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  bankAccountId Int
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  name      String
  limit     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  deletedAt Boolean         @default(false)
  TransactionExpenses TransactionExpense[]
}

model TransactionCategory {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  deletedAt Boolean         @default(false)
  TransactionExpenses TransactionExpense[]
  TransactionRevenues TransactionRevenue[]
  SubCategories TransactionSubCategory[]
}

model TransactionExpense {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  bankAccountId Int
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  creditCardId Int?
  creditCard  CreditCard? @relation(fields: [creditCardId], references: [id])
  categoryId  Int
  category    TransactionCategory? @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory TransactionSubCategory? @relation(fields: [subCategoryId], references: [id])
  description String
  observation String?
  tags        String[] @default([])
  amount      Float
  installments Int?      @default(1)
  ignoreTransaction Boolean @default(false)
  variant     TransactionTransferVariant @default(Regular)
  date        DateTime
  calculationDate DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   Boolean   @default(false)
  TransactionTransfers    TransactionTransfer[]
}

model TransactionRevenue {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  bankAccountId Int
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  categoryId  Int
  category    TransactionCategory? @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory TransactionSubCategory? @relation(fields: [subCategoryId], references: [id])
  description String
  observation String?
  tags        String[] @default([])
  amount      Float
  ignoreTransaction Boolean @default(false)
  variant     TransactionTransferVariant @default(Regular)
  date        DateTime
  calculationDate DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   Boolean   @default(false)
  TransactionTransfers    TransactionTransfer[]
}

model TransactionSubCategory {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  categoryId Int
  category  TransactionCategory        @relation(fields: [categoryId], references: [id])
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  deletedAt Boolean         @default(false)
  TransactionExpenses TransactionExpense[]
  TransactionRevenues TransactionRevenue[]
}

model TransactionTransfer {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  expenseId Int @unique
  expense TransactionExpense @relation(fields: [expenseId], references: [id])
  revenueId Int @unique
  revenue TransactionRevenue @relation(fields: [revenueId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   Boolean   @default(false)
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  deletedAt    Boolean       @default(false)
  BankAccounts BankAccount[]
  CreditCards  CreditCard[]
  Expenses     TransactionExpense[]
  Revenues     TransactionRevenue[]
  Transfers    TransactionTransfer[]
  TransactionCategories   TransactionCategory[]
  TransactionSubCategories TransactionSubCategory[]
}
